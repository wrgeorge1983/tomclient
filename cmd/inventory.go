package cmd

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strings"

	"github.com/spf13/cobra"
	"tomclient/auth"
)

var (
	inventoryRefresh   bool
	inventoryPrefix    string
	inventoryHostfile  bool
	inventoryUpdateEtc bool
)

var inventoryCmd = &cobra.Command{
	Use:   "inventory",
	Args:  cobra.NoArgs,
	Short: "List cached device inventory",
	Long: `List device hostnames from cached inventory.
Automatically fetches and caches inventory from Tom API with configurable TTL (default: 1 hour).
Used for shell autocomplete and quick device name lookups.`,
	Example: `  tomclient inventory                    # List all cached devices
  tomclient inventory --refresh          # Force refresh from API
  tomclient inventory --prefix=router    # Filter devices by prefix
  tomclient inventory --hostfile         # Output in /etc/hosts format
  sudo tomclient inventory --update-hosts # Update /etc/hosts with all devices`,
	RunE: func(cmd *cobra.Command, args []string) error {
		cmd.SilenceUsage = true
		cfg, err := auth.LoadConfig(configDir)
		if err != nil {
			return fmt.Errorf("failed to load config: %w", err)
		}

		if err := cfg.Validate(); err != nil {
			return err
		}

		var devices []string

		if inventoryRefresh {
			devices, err = fetchAndCacheInventory(cfg)
			if err != nil {
				return err
			}
		} else {
			cache, err := auth.LoadInventoryCache(cfg.ConfigDir)
			if err != nil {
				return fmt.Errorf("failed to load cache: %w", err)
			}

			if cache == nil {
				devices, err = fetchAndCacheInventory(cfg)
				if err != nil {
					return err
				}
			} else {
				devices = cache.Devices
			}
		}

		if inventoryPrefix != "" {
			filtered := []string{}
			prefix := strings.ToLower(inventoryPrefix)
			for _, device := range devices {
				if strings.HasPrefix(strings.ToLower(device), prefix) {
					filtered = append(filtered, device)
				}
			}
			devices = filtered
		}

		if inventoryUpdateEtc {
			return updateEtcHosts(cfg, devices)
		}

		if inventoryHostfile {
			printHostfileFormat(cfg, devices)
			return nil
		}

		for _, device := range devices {
			fmt.Println(device)
		}

		return nil
	},
}

func fetchAndCacheInventory(cfg *auth.Config) ([]string, error) {
	finalAPIURL := apiURL
	if apiURL == getDefaultAPIURL() && cfg.APIURL != "" {
		finalAPIURL = cfg.APIURL
	}

	client := createClient(finalAPIURL, cfg)

	inventory, err := client.ExportInventory("")
	if err != nil {
		return nil, fmt.Errorf("failed to fetch inventory: %w", err)
	}

	devices := make([]string, 0, len(inventory))
	for deviceName := range inventory {
		devices = append(devices, deviceName)
	}

	sort.Strings(devices)

	ttl := auth.GetCacheTTL()
	if err := auth.SaveInventoryCache(cfg.ConfigDir, devices, ttl); err != nil {
		return nil, fmt.Errorf("failed to save cache: %w", err)
	}

	return devices, nil
}

var inventoryClearCmd = &cobra.Command{
	Use:   "clear",
	Short: "Clear cached inventory",
	Long:  `Remove the cached inventory file. Next inventory lookup will fetch fresh data from the API.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		cmd.SilenceUsage = true
		cfg, err := auth.LoadConfig(configDir)
		if err != nil {
			return fmt.Errorf("failed to load config: %w", err)
		}

		if err := auth.ClearInventoryCache(cfg.ConfigDir); err != nil {
			return err
		}

		fmt.Println("Inventory cache cleared")
		return nil
	},
}

func printHostfileFormat(cfg *auth.Config, devices []string) {
	client := createClient(getAPIURL(cfg), cfg)
	inventory, err := client.ExportInventory("")
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error: failed to fetch inventory details: %v\n", err)
		return
	}

	fmt.Println("# Generated by tomclient")
	for _, device := range devices {
		if config, ok := inventory[device]; ok {
			fmt.Printf("%s\t%s\n", config.Host, device)
		}
	}
}

func updateEtcHosts(cfg *auth.Config, devices []string) error {
	hostsFile := "/etc/hosts"

	if os.Geteuid() != 0 {
		return fmt.Errorf("must run as root (sudo) to update /etc/hosts")
	}

	client := createClient(getAPIURL(cfg), cfg)
	inventory, err := client.ExportInventory("")
	if err != nil {
		return fmt.Errorf("failed to fetch inventory details: %w", err)
	}

	file, err := os.Open(hostsFile)
	if err != nil {
		return fmt.Errorf("failed to open %s: %w", hostsFile, err)
	}

	var lines []string
	scanner := bufio.NewScanner(file)
	inManagedBlock := false

	for scanner.Scan() {
		line := scanner.Text()

		if strings.Contains(line, "# BEGIN tomclient managed block") {
			inManagedBlock = true
			continue
		}

		if strings.Contains(line, "# END tomclient managed block") {
			inManagedBlock = false
			continue
		}

		if !inManagedBlock {
			lines = append(lines, line)
		}
	}
	file.Close()

	if err := scanner.Err(); err != nil {
		return fmt.Errorf("failed to read %s: %w", hostsFile, err)
	}

	tmpFile := hostsFile + ".tmp"
	out, err := os.Create(tmpFile)
	if err != nil {
		return fmt.Errorf("failed to create temp file: %w", err)
	}
	defer out.Close()

	for _, line := range lines {
		fmt.Fprintln(out, line)
	}

	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "# BEGIN tomclient managed block")
	fmt.Fprintln(out, "# This section is automatically managed by tomclient")
	fmt.Fprintln(out, "# Do not edit manually - changes will be overwritten")

	for _, device := range devices {
		if config, ok := inventory[device]; ok {
			fmt.Fprintf(out, "%s\t%s\n", config.Host, device)
		}
	}

	fmt.Fprintln(out, "# END tomclient managed block")

	out.Close()

	if err := os.Rename(tmpFile, hostsFile); err != nil {
		os.Remove(tmpFile)
		return fmt.Errorf("failed to update %s: %w", hostsFile, err)
	}

	fmt.Printf("Successfully updated %s with %d devices\n", hostsFile, len(devices))
	return nil
}

func getAPIURL(cfg *auth.Config) string {
	if apiURL == getDefaultAPIURL() && cfg.APIURL != "" {
		return cfg.APIURL
	}
	return apiURL
}

func init() {
	rootCmd.AddCommand(inventoryCmd)
	inventoryCmd.AddCommand(inventoryClearCmd)

	inventoryCmd.Flags().BoolVarP(&inventoryRefresh, "refresh", "r", false, "Force refresh from API")
	inventoryCmd.Flags().StringVarP(&inventoryPrefix, "prefix", "p", "", "Filter devices by prefix")
	inventoryCmd.Flags().BoolVar(&inventoryHostfile, "hostfile", false, "Output in /etc/hosts format")
	inventoryCmd.Flags().BoolVar(&inventoryUpdateEtc, "update-hosts", false, "Update /etc/hosts file (requires sudo)")
}
